{"ast":null,"code":"import axios from \"axios\";\nimport { ALL_CHATS_FAIL, ALL_CHATS_REQUEST, ALL_CHATS_SUCCESS, CLEAR_ERRORS, NEW_CHAT_FAIL, NEW_CHAT_REQUEST, NEW_CHAT_SUCCESS } from \"../constants/chatConstants\"; // Get All Chats\n\nexport const getAllChats = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_CHATS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/chats');\n    dispatch({\n      type: ALL_CHATS_SUCCESS,\n      payload: data.chats\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_CHATS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // New Chat\n\nexport const addNewChat = userId => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_CHAT_REQUEST\n    });\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/v1/newChat\", {\n      receiverId: userId\n    }, config);\n    dispatch({\n      type: NEW_CHAT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_CHAT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear All Errors\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["D:/New folder (4)/instagram-mern-main/frontend/src/actions/chatAction.js"],"names":["axios","ALL_CHATS_FAIL","ALL_CHATS_REQUEST","ALL_CHATS_SUCCESS","CLEAR_ERRORS","NEW_CHAT_FAIL","NEW_CHAT_REQUEST","NEW_CHAT_SUCCESS","getAllChats","dispatch","type","data","get","payload","chats","error","response","message","addNewChat","userId","config","header","post","receiverId","clearErrors"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,iBAA5C,EAA+DC,YAA/D,EAA6EC,aAA7E,EAA4FC,gBAA5F,EAA8GC,gBAA9G,QAAsI,4BAAtI,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AAEA,UAAM;AAAES,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACY,GAAN,CAAU,eAAV,CAAvB;AAEAH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP,iBADD;AAELU,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAFT,KAAD,CAAR;AAKH,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,cADD;AAELY,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFxB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,MAAOV,QAAP,IAAoB;AACtD,MAAI;AAEAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ;AAAR,KAAD,CAAR;AACA,UAAMc,MAAM,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAE,wBAAgB;AAAlB;AAAV,KAAf;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACsB,IAAN,CAAW,iBAAX,EAA8B;AAAEC,MAAAA,UAAU,EAAEJ;AAAd,KAA9B,EAAsDC,MAAtD,CAAvB;AAEAX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEH,gBADD;AAELM,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKH,GAXD,CAWE,OAAOI,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,aADD;AAELQ,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFxB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMO,WAAW,GAAG,MAAOf,QAAD,IAAc;AAC3CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACH,CAFM","sourcesContent":["import axios from \"axios\";\nimport { ALL_CHATS_FAIL, ALL_CHATS_REQUEST, ALL_CHATS_SUCCESS, CLEAR_ERRORS, NEW_CHAT_FAIL, NEW_CHAT_REQUEST, NEW_CHAT_SUCCESS } from \"../constants/chatConstants\";\n\n// Get All Chats\nexport const getAllChats = () => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_CHATS_REQUEST });\n\n        const { data } = await axios.get('/api/v1/chats');\n\n        dispatch({\n            type: ALL_CHATS_SUCCESS,\n            payload: data.chats,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: ALL_CHATS_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// New Chat\nexport const addNewChat = (userId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_CHAT_REQUEST });\n        const config = { header: { \"Content-Type\": \"application/json\" } }\n        const { data } = await axios.post(\"/api/v1/newChat\", { receiverId: userId }, config);\n\n        dispatch({\n            type: NEW_CHAT_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: NEW_CHAT_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n}\n\n// Clear All Errors\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n}"]},"metadata":{},"sourceType":"module"}