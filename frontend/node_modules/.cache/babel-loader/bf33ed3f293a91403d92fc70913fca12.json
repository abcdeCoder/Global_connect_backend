{"ast":null,"code":"import { ALL_MESSAGES_ADD, ALL_MESSAGES_FAIL, ALL_MESSAGES_REQUEST, ALL_MESSAGES_SUCCESS, CLEAR_ERRORS, NEW_MESSAGE_FAIL, NEW_MESSAGE_REQUEST, NEW_MESSAGE_RESET, NEW_MESSAGE_SUCCESS } from \"../constants/messageConstants\";\nexport const allMessagesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    messages: []\n  };\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case ALL_MESSAGES_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case ALL_MESSAGES_SUCCESS:\n      return {\n        loading: false,\n        messages: payload\n      };\n\n    case ALL_MESSAGES_FAIL:\n      return { ...state,\n        loading: false,\n        error: payload\n      };\n\n    case ALL_MESSAGES_ADD:\n      return { ...state,\n        messages: [...state.messages, payload]\n      };\n\n    case CLEAR_ERRORS:\n      return { ...state,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\nexport const newMessageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case NEW_MESSAGE_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case NEW_MESSAGE_SUCCESS:\n      return {\n        loading: false,\n        success: payload.success,\n        newMessage: payload.newMessage\n      };\n\n    case NEW_MESSAGE_RESET:\n      return { ...state,\n        success: false,\n        newMessage: {}\n      };\n\n    case NEW_MESSAGE_FAIL:\n      return { ...state,\n        loading: false,\n        error: payload\n      };\n\n    case CLEAR_ERRORS:\n      return { ...state,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/New folder (4)/instagram-mern-main/frontend/src/reducers/messageReducer.js"],"names":["ALL_MESSAGES_ADD","ALL_MESSAGES_FAIL","ALL_MESSAGES_REQUEST","ALL_MESSAGES_SUCCESS","CLEAR_ERRORS","NEW_MESSAGE_FAIL","NEW_MESSAGE_REQUEST","NEW_MESSAGE_RESET","NEW_MESSAGE_SUCCESS","allMessagesReducer","state","messages","type","payload","loading","error","newMessageReducer","success","newMessage"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,iBAA3B,EAA8CC,oBAA9C,EAAoEC,oBAApE,EAA0FC,YAA1F,EAAwGC,gBAAxG,EAA0HC,mBAA1H,EAA+IC,iBAA/I,EAAkKC,mBAAlK,QAA6L,+BAA7L;AAEA,OAAO,MAAMC,kBAAkB,GAAG,YAAiD;AAAA,MAAhDC,KAAgD,uEAAxC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAwC;AAAA,MAAtB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;;AAC/E,UAAQD,IAAR;AACI,SAAKV,oBAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHI,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKX,oBAAL;AACI,aAAO;AACHW,QAAAA,OAAO,EAAE,KADN;AAEHH,QAAAA,QAAQ,EAAEE;AAFP,OAAP;;AAIJ,SAAKZ,iBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHI,QAAAA,OAAO,EAAE,KAFN;AAGHC,QAAAA,KAAK,EAAEF;AAHJ,OAAP;;AAKJ,SAAKb,gBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHC,QAAAA,QAAQ,EAAE,CAAC,GAAGD,KAAK,CAACC,QAAV,EAAoBE,OAApB;AAFP,OAAP;;AAIJ,SAAKT,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHK,QAAAA,KAAK,EAAE;AAFJ,OAAP;;AAIJ;AACI,aAAOL,KAAP;AA5BR;AA8BH,CA/BM;AAiCP,OAAO,MAAMM,iBAAiB,GAAG,YAAmC;AAAA,MAAlCN,KAAkC,uEAA1B,EAA0B;AAAA,MAAtB;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;;AAChE,UAAQD,IAAR;AACI,SAAKN,mBAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHI,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKN,mBAAL;AACI,aAAO;AACHM,QAAAA,OAAO,EAAE,KADN;AAEHG,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OAFd;AAGHC,QAAAA,UAAU,EAAEL,OAAO,CAACK;AAHjB,OAAP;;AAKJ,SAAKX,iBAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHO,QAAAA,OAAO,EAAE,KAFN;AAGHC,QAAAA,UAAU,EAAE;AAHT,OAAP;;AAKJ,SAAKb,gBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHI,QAAAA,OAAO,EAAE,KAFN;AAGHC,QAAAA,KAAK,EAAEF;AAHJ,OAAP;;AAKJ,SAAKT,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHK,QAAAA,KAAK,EAAE;AAFJ,OAAP;;AAIJ;AACI,aAAOL,KAAP;AA9BR;AAgCH,CAjCM","sourcesContent":["import { ALL_MESSAGES_ADD, ALL_MESSAGES_FAIL, ALL_MESSAGES_REQUEST, ALL_MESSAGES_SUCCESS, CLEAR_ERRORS, NEW_MESSAGE_FAIL, NEW_MESSAGE_REQUEST, NEW_MESSAGE_RESET, NEW_MESSAGE_SUCCESS } from \"../constants/messageConstants\";\n\nexport const allMessagesReducer = (state = { messages: [] }, { type, payload }) => {\n    switch (type) {\n        case ALL_MESSAGES_REQUEST:\n            return {\n                ...state,\n                loading: true,\n            };\n        case ALL_MESSAGES_SUCCESS:\n            return {\n                loading: false,\n                messages: payload,\n            };\n        case ALL_MESSAGES_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: payload,\n            };\n        case ALL_MESSAGES_ADD:\n            return {\n                ...state,\n                messages: [...state.messages, payload]\n            };\n        case CLEAR_ERRORS:\n            return {\n                ...state,\n                error: null,\n            };\n        default:\n            return state;\n    }\n}\n\nexport const newMessageReducer = (state = {}, { type, payload }) => {\n    switch (type) {\n        case NEW_MESSAGE_REQUEST:\n            return {\n                ...state,\n                loading: true,\n            };\n        case NEW_MESSAGE_SUCCESS:\n            return {\n                loading: false,\n                success: payload.success,\n                newMessage: payload.newMessage,\n            };\n        case NEW_MESSAGE_RESET:\n            return {\n                ...state,\n                success: false,\n                newMessage: {}\n            };\n        case NEW_MESSAGE_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: payload,\n            };\n        case CLEAR_ERRORS:\n            return {\n                ...state,\n                error: null,\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}