{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder (4)\\\\instagram-mern-main\\\\frontend\\\\src\\\\components\\\\User\\\\Posts\\\\PostContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { clearErrors } from '../../../actions/postAction';\nimport { getUserDetails } from '../../../actions/userAction';\nimport { DELETE_POST_RESET, LIKE_UNLIKE_POST_RESET, NEW_COMMENT_RESET, SAVE_UNSAVE_POST_RESET } from '../../../constants/postConstants';\nimport PostItem from './PostItem';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostContainer = _ref => {\n  _s();\n\n  let {\n    posts,\n    id\n  } = _ref;\n  const dispatch = useDispatch();\n  const params = useParams();\n  const {\n    error: likeError,\n    message,\n    success\n  } = useSelector(state => state.likePost);\n  const {\n    error: commentError,\n    success: commentSuccess\n  } = useSelector(state => state.newComment);\n  const {\n    error: saveError,\n    success: saveSuccess,\n    message: saveMessage\n  } = useSelector(state => state.savePost);\n  const {\n    error: deleteError,\n    success: deleteSuccess\n  } = useSelector(state => state.deletePost);\n  useEffect(() => {\n    dispatch(getUserDetails(params.username));\n\n    if (likeError) {\n      toast.error(likeError);\n      dispatch(clearErrors());\n    }\n\n    if (success) {\n      toast.success(message);\n      dispatch({\n        type: LIKE_UNLIKE_POST_RESET\n      });\n    }\n\n    if (commentError) {\n      toast.error(commentError);\n      dispatch(clearErrors());\n    }\n\n    if (commentSuccess) {\n      toast.success(\"Comment Added\");\n      dispatch({\n        type: NEW_COMMENT_RESET\n      });\n    }\n\n    if (saveError) {\n      toast.error(saveError);\n      dispatch(clearErrors());\n    }\n\n    if (saveSuccess) {\n      toast.success(saveMessage);\n      dispatch({\n        type: SAVE_UNSAVE_POST_RESET\n      });\n    }\n\n    if (deleteError) {\n      toast.error(deleteError);\n      dispatch(clearErrors());\n    }\n\n    if (deleteSuccess) {\n      toast.success(\"Post Deleted\");\n      dispatch({\n        type: DELETE_POST_RESET\n      });\n    }\n  }, [dispatch, success, likeError, message, commentError, commentSuccess, saveError, saveSuccess, saveMessage, deleteError, deleteSuccess]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-3 gap-1 sm:gap-8 my-1 mb-8\",\n    id: id,\n    children: posts === null || posts === void 0 ? void 0 : posts.map((post, i) => /*#__PURE__*/_createElement(PostItem, { ...post,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    })).reverse()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostContainer, \"ugpAK55Awq6zJcT9sFxdfjXvLzY=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PostContainer;\nexport default PostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContainer\");","map":{"version":3,"sources":["D:/New folder (4)/instagram-mern-main/frontend/src/components/User/Posts/PostContainer.jsx"],"names":["useEffect","useDispatch","useSelector","useParams","toast","clearErrors","getUserDetails","DELETE_POST_RESET","LIKE_UNLIKE_POST_RESET","NEW_COMMENT_RESET","SAVE_UNSAVE_POST_RESET","PostItem","PostContainer","posts","id","dispatch","params","error","likeError","message","success","state","likePost","commentError","commentSuccess","newComment","saveError","saveSuccess","saveMessage","savePost","deleteError","deleteSuccess","deletePost","username","type","map","post","i","reverse"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { clearErrors } from '../../../actions/postAction';\nimport { getUserDetails } from '../../../actions/userAction';\nimport { DELETE_POST_RESET, LIKE_UNLIKE_POST_RESET, NEW_COMMENT_RESET, SAVE_UNSAVE_POST_RESET } from '../../../constants/postConstants';\nimport PostItem from './PostItem'\n\nconst PostContainer = ({ posts, id }) => {\n\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const { error: likeError, message, success } = useSelector((state) => state.likePost)\n    const { error: commentError, success: commentSuccess } = useSelector((state) => state.newComment)\n    const { error: saveError, success: saveSuccess, message: saveMessage } = useSelector((state) => state.savePost)\n    const { error: deleteError, success: deleteSuccess } = useSelector((state) => state.deletePost)\n\n    useEffect(() => {\n        dispatch(getUserDetails(params.username));\n        if (likeError) {\n            toast.error(likeError);\n            dispatch(clearErrors());\n        }\n        if (success) {\n            toast.success(message)\n            dispatch({ type: LIKE_UNLIKE_POST_RESET });\n        }\n        if (commentError) {\n            toast.error(commentError);\n            dispatch(clearErrors());\n        }\n        if (commentSuccess) {\n            toast.success(\"Comment Added\")\n            dispatch({ type: NEW_COMMENT_RESET });\n        }\n        if (saveError) {\n            toast.error(saveError);\n            dispatch(clearErrors());\n        }\n        if (saveSuccess) {\n            toast.success(saveMessage)\n            dispatch({ type: SAVE_UNSAVE_POST_RESET });\n        }\n        if (deleteError) {\n            toast.error(deleteError);\n            dispatch(clearErrors());\n        }\n        if (deleteSuccess) {\n            toast.success(\"Post Deleted\")\n            dispatch({ type: DELETE_POST_RESET });\n        }\n    }, [dispatch, success, likeError, message, commentError, commentSuccess, saveError, saveSuccess, saveMessage, deleteError, deleteSuccess]);\n\n    return (\n        <div className=\"grid grid-cols-3 gap-1 sm:gap-8 my-1 mb-8\" id={id}>\n            {posts?.map((post, i) => (\n                <PostItem {...post} key={i} />\n            )).reverse()\n            }\n        </div>\n    )\n}\n\nexport default PostContainer"]},"metadata":{},"sourceType":"module"}