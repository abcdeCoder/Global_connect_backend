{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder (4)\\\\instagram-mern-main\\\\frontend\\\\src\\\\components\\\\Home\\\\PostsContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { clearErrors, getPostsOfFollowing } from '../../actions/postAction';\nimport { LIKE_UNLIKE_POST_RESET, NEW_COMMENT_RESET, POST_FOLLOWING_RESET, SAVE_UNSAVE_POST_RESET } from '../../constants/postConstants';\nimport UsersDialog from '../Layouts/UsersDialog';\nimport PostItem from './PostItem';\nimport StoriesContainer from './StoriesContainer';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport SpinLoader from '../Layouts/SpinLoader';\nimport SkeletonPost from '../Layouts/SkeletonPost';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostsContainer = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [usersList, setUsersList] = useState([]);\n  const [usersDialog, setUsersDialog] = useState(false);\n  const [page, setPage] = useState(2);\n  const {\n    loading,\n    error,\n    posts,\n    totalPosts\n  } = useSelector(state => state.postOfFollowing);\n  const {\n    error: likeError,\n    message,\n    success\n  } = useSelector(state => state.likePost);\n  const {\n    error: commentError,\n    success: commentSuccess\n  } = useSelector(state => state.newComment);\n  const {\n    error: saveError,\n    success: saveSuccess,\n    message: saveMessage\n  } = useSelector(state => state.savePost);\n\n  const handleClose = () => setUsersDialog(false);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      dispatch(clearErrors());\n    }\n\n    dispatch(getPostsOfFollowing());\n    dispatch({\n      type: POST_FOLLOWING_RESET\n    });\n  }, [dispatch, error]);\n  useEffect(() => {\n    if (likeError) {\n      toast.error(likeError);\n      dispatch(clearErrors());\n    }\n\n    if (success) {\n      toast.success(message);\n      dispatch({\n        type: LIKE_UNLIKE_POST_RESET\n      });\n    }\n\n    if (commentError) {\n      toast.error(commentError);\n      dispatch(clearErrors());\n    }\n\n    if (commentSuccess) {\n      toast.success(\"Comment Added\");\n      dispatch({\n        type: NEW_COMMENT_RESET\n      });\n    }\n\n    if (saveError) {\n      toast.error(saveError);\n      dispatch(clearErrors());\n    }\n\n    if (saveSuccess) {\n      toast.success(saveMessage);\n      dispatch({\n        type: SAVE_UNSAVE_POST_RESET\n      });\n    }\n  }, [dispatch, success, likeError, message, commentError, commentSuccess, saveError, saveSuccess, saveMessage]);\n\n  const fetchMorePosts = () => {\n    setPage(prev => prev + 1);\n    dispatch(getPostsOfFollowing(page));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-full lg:w-2/3 sm:mt-6 sm:px-8 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(StoriesContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), loading && Array(5).fill(\"\").map((el, i) => /*#__PURE__*/_jsxDEV(SkeletonPost, {}, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 55\n      }, this)), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        dataLength: posts.length,\n        next: fetchMorePosts,\n        hasMore: posts.length !== totalPosts,\n        loader: /*#__PURE__*/_jsxDEV(SpinLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-full mt-1 sm:mt-6 flex flex-col space-y-4\",\n          children: posts === null || posts === void 0 ? void 0 : posts.map(post => /*#__PURE__*/_jsxDEV(PostItem, { ...post,\n            setUsersDialog: setUsersDialog,\n            setUsersList: setUsersList\n          }, post._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UsersDialog, {\n        title: \"Likes\",\n        open: usersDialog,\n        onClose: handleClose,\n        usersList: usersList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(PostsContainer, \"DZagAUh/TYqnUh+mqY3FWKJEEyo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PostsContainer;\nexport default PostsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsContainer\");","map":{"version":3,"sources":["D:/New folder (4)/instagram-mern-main/frontend/src/components/Home/PostsContainer.jsx"],"names":["useEffect","useState","useDispatch","useSelector","toast","clearErrors","getPostsOfFollowing","LIKE_UNLIKE_POST_RESET","NEW_COMMENT_RESET","POST_FOLLOWING_RESET","SAVE_UNSAVE_POST_RESET","UsersDialog","PostItem","StoriesContainer","InfiniteScroll","SpinLoader","SkeletonPost","PostsContainer","dispatch","usersList","setUsersList","usersDialog","setUsersDialog","page","setPage","loading","error","posts","totalPosts","state","postOfFollowing","likeError","message","success","likePost","commentError","commentSuccess","newComment","saveError","saveSuccess","saveMessage","savePost","handleClose","type","fetchMorePosts","prev","Array","fill","map","el","i","length","post","_id"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { toast } from 'react-toastify'\nimport { clearErrors, getPostsOfFollowing } from '../../actions/postAction'\nimport { LIKE_UNLIKE_POST_RESET, NEW_COMMENT_RESET, POST_FOLLOWING_RESET, SAVE_UNSAVE_POST_RESET } from '../../constants/postConstants'\nimport UsersDialog from '../Layouts/UsersDialog'\nimport PostItem from './PostItem'\nimport StoriesContainer from './StoriesContainer'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport SpinLoader from '../Layouts/SpinLoader'\nimport SkeletonPost from '../Layouts/SkeletonPost'\n\nconst PostsContainer = () => {\n\n    const dispatch = useDispatch();\n\n    const [usersList, setUsersList] = useState([]);\n    const [usersDialog, setUsersDialog] = useState(false);\n    const [page, setPage] = useState(2);\n\n    const { loading, error, posts, totalPosts } = useSelector((state) => state.postOfFollowing)\n    const { error: likeError, message, success } = useSelector((state) => state.likePost)\n    const { error: commentError, success: commentSuccess } = useSelector((state) => state.newComment)\n    const { error: saveError, success: saveSuccess, message: saveMessage } = useSelector((state) => state.savePost)\n\n    const handleClose = () => setUsersDialog(false);\n\n    useEffect(() => {\n        if (error) {\n            toast.error(error);\n            dispatch(clearErrors());\n        }\n        dispatch(getPostsOfFollowing());\n        dispatch({ type: POST_FOLLOWING_RESET });\n    }, [dispatch, error]);\n\n    useEffect(() => {\n        if (likeError) {\n            toast.error(likeError);\n            dispatch(clearErrors());\n        }\n        if (success) {\n            toast.success(message)\n            dispatch({ type: LIKE_UNLIKE_POST_RESET });\n        }\n        if (commentError) {\n            toast.error(commentError);\n            dispatch(clearErrors());\n        }\n        if (commentSuccess) {\n            toast.success(\"Comment Added\")\n            dispatch({ type: NEW_COMMENT_RESET });\n        }\n        if (saveError) {\n            toast.error(saveError);\n            dispatch(clearErrors());\n        }\n        if (saveSuccess) {\n            toast.success(saveMessage)\n            dispatch({ type: SAVE_UNSAVE_POST_RESET });\n        }\n    }, [dispatch, success, likeError, message, commentError, commentSuccess, saveError, saveSuccess, saveMessage])\n\n    const fetchMorePosts = () => {\n        setPage((prev) => prev + 1)\n        dispatch(getPostsOfFollowing(page));\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-col w-full lg:w-2/3 sm:mt-6 sm:px-8 mb-8\">\n\n                <StoriesContainer />\n\n                {loading &&\n                    Array(5).fill(\"\").map((el, i) => (<SkeletonPost key={i} />))\n                }\n                <InfiniteScroll\n                    dataLength={posts.length}\n                    next={fetchMorePosts}\n                    hasMore={posts.length !== totalPosts}\n                    loader={<SpinLoader />}\n                >\n                    <div className=\"w-full h-full mt-1 sm:mt-6 flex flex-col space-y-4\">\n                        {posts?.map((post) => (\n                            <PostItem key={post._id} {...post} setUsersDialog={setUsersDialog} setUsersList={setUsersList} />\n                        ))}\n                    </div>\n                </InfiniteScroll>\n\n                <UsersDialog title=\"Likes\" open={usersDialog} onClose={handleClose} usersList={usersList} />\n\n            </div>\n        </>\n    )\n}\n\nexport default PostsContainer"]},"metadata":{},"sourceType":"module"}