{"ast":null,"code":"import axios from \"axios\";\nimport { CLEAR_ERRORS, DELETE_POST_FAIL, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_UNLIKE_POST_FAIL, LIKE_UNLIKE_POST_REQUEST, LIKE_UNLIKE_POST_SUCCESS, NEW_COMMENT_FAIL, NEW_COMMENT_REQUEST, NEW_COMMENT_SUCCESS, NEW_POST_FAIL, NEW_POST_REQUEST, NEW_POST_SUCCESS, POST_DETAILS_FAIL, POST_DETAILS_REQUEST, POST_DETAILS_SUCCESS, POST_FOLLOWING_FAIL, POST_FOLLOWING_REQUEST, POST_FOLLOWING_SUCCESS, SAVE_UNSAVE_POST_FAIL, SAVE_UNSAVE_POST_REQUEST, SAVE_UNSAVE_POST_SUCCESS } from \"../constants/postConstants\"; // New Post\n\nexport const addNewPost = postData => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_POST_REQUEST\n    });\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/v1/post/new\", postData, config);\n    dispatch({\n      type: NEW_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_POST_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get Post of Followings\n\nexport const getPostsOfFollowing = function () {\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: POST_FOLLOWING_REQUEST\n      });\n      setTimeout(async () => {\n        const {\n          data\n        } = await axios.get(`/api/v1/posts?page=${page}`);\n        dispatch({\n          type: POST_FOLLOWING_SUCCESS,\n          payload: data\n        });\n      }, 300);\n    } catch (error) {\n      dispatch({\n        type: POST_FOLLOWING_FAIL,\n        payload: error.response.data.message\n      });\n    }\n  };\n}; // Like | Unlike Post\n\nexport const likePost = postId => async dispatch => {\n  try {\n    dispatch({\n      type: LIKE_UNLIKE_POST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/post/${postId}`);\n    dispatch({\n      type: LIKE_UNLIKE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: LIKE_UNLIKE_POST_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (postId, comment) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_COMMENT_REQUEST\n    });\n    const config = {\n      header: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/post/comment/${postId}`, {\n      comment\n    }, config);\n    dispatch({\n      type: NEW_COMMENT_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_COMMENT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Save | Unsave Post\n\nexport const savePost = postId => async dispatch => {\n  try {\n    dispatch({\n      type: SAVE_UNSAVE_POST_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(`/api/v1/post/${postId}`);\n    dispatch({\n      type: SAVE_UNSAVE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SAVE_UNSAVE_POST_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete Post\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_POST_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/post/${postId}`);\n    dispatch({\n      type: DELETE_POST_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_POST_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Get Post Details\n\nexport const getPostDetails = postId => async dispatch => {\n  try {\n    dispatch({\n      type: POST_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/post/detail/${postId}`);\n    dispatch({\n      type: POST_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear All Errors\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["D:/New folder (4)/instagram-mern-main/frontend/src/actions/postAction.js"],"names":["axios","CLEAR_ERRORS","DELETE_POST_FAIL","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_UNLIKE_POST_FAIL","LIKE_UNLIKE_POST_REQUEST","LIKE_UNLIKE_POST_SUCCESS","NEW_COMMENT_FAIL","NEW_COMMENT_REQUEST","NEW_COMMENT_SUCCESS","NEW_POST_FAIL","NEW_POST_REQUEST","NEW_POST_SUCCESS","POST_DETAILS_FAIL","POST_DETAILS_REQUEST","POST_DETAILS_SUCCESS","POST_FOLLOWING_FAIL","POST_FOLLOWING_REQUEST","POST_FOLLOWING_SUCCESS","SAVE_UNSAVE_POST_FAIL","SAVE_UNSAVE_POST_REQUEST","SAVE_UNSAVE_POST_SUCCESS","addNewPost","postData","dispatch","type","config","header","data","post","payload","error","response","message","getPostsOfFollowing","page","setTimeout","get","likePost","postId","addComment","comment","success","savePost","deletePost","delete","getPostDetails","clearErrors"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { CLEAR_ERRORS, DELETE_POST_FAIL, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_UNLIKE_POST_FAIL, LIKE_UNLIKE_POST_REQUEST, LIKE_UNLIKE_POST_SUCCESS, NEW_COMMENT_FAIL, NEW_COMMENT_REQUEST, NEW_COMMENT_SUCCESS, NEW_POST_FAIL, NEW_POST_REQUEST, NEW_POST_SUCCESS, POST_DETAILS_FAIL, POST_DETAILS_REQUEST, POST_DETAILS_SUCCESS, POST_FOLLOWING_FAIL, POST_FOLLOWING_REQUEST, POST_FOLLOWING_SUCCESS, SAVE_UNSAVE_POST_FAIL, SAVE_UNSAVE_POST_REQUEST, SAVE_UNSAVE_POST_SUCCESS } from \"../constants/postConstants\";\n\n\n// New Post\nexport const addNewPost = (postData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_POST_REQUEST });\n        const config = { header: { \"Content-Type\": \"application/json\" } }\n        const { data } = await axios.post(\"/api/v1/post/new\", postData, config);\n\n        dispatch({\n            type: NEW_POST_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: NEW_POST_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n}\n\n// Get Post of Followings\nexport const getPostsOfFollowing = (page = 1) => async (dispatch) => {\n    try {\n\n        dispatch({ type: POST_FOLLOWING_REQUEST });\n\n        setTimeout(async () => {\n\n            const { data } = await axios.get(`/api/v1/posts?page=${page}`);\n\n            dispatch({\n                type: POST_FOLLOWING_SUCCESS,\n                payload: data,\n            });\n\n        }, 300);\n\n    } catch (error) {\n        dispatch({\n            type: POST_FOLLOWING_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Like | Unlike Post\nexport const likePost = (postId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: LIKE_UNLIKE_POST_REQUEST });\n        const { data } = await axios.get(`/api/v1/post/${postId}`);\n\n        dispatch({\n            type: LIKE_UNLIKE_POST_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: LIKE_UNLIKE_POST_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Add Comment\nexport const addComment = (postId, comment) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_COMMENT_REQUEST });\n        const config = { header: { \"Content-Type\": \"application/json\" } }\n        const { data } = await axios.post(`/api/v1/post/comment/${postId}`, { comment }, config);\n\n        dispatch({\n            type: NEW_COMMENT_SUCCESS,\n            payload: data.success,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: NEW_COMMENT_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n}\n\n// Save | Unsave Post\nexport const savePost = (postId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: SAVE_UNSAVE_POST_REQUEST });\n        const { data } = await axios.post(`/api/v1/post/${postId}`);\n\n        dispatch({\n            type: SAVE_UNSAVE_POST_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: SAVE_UNSAVE_POST_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Delete Post\nexport const deletePost = (postId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_POST_REQUEST });\n        const { data } = await axios.delete(`/api/v1/post/${postId}`);\n\n        dispatch({\n            type: DELETE_POST_SUCCESS,\n            payload: data.success,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_POST_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Get Post Details\nexport const getPostDetails = (postId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: POST_DETAILS_REQUEST });\n        const { data } = await axios.get(`/api/v1/post/detail/${postId}`);\n\n        dispatch({\n            type: POST_DETAILS_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: POST_DETAILS_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Clear All Errors\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n}"]},"metadata":{},"sourceType":"module"}